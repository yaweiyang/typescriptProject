大话设计模式
第一章： 简单工厂模式 （Calculation.ts）
typescript (面向对象语言) 三大特性：封装、继承、多态
    UML类图： 1 、空心三角+实线 代表继承  2 、接口 矩形表示法、棒棒糖法 （interface）空心三角+虚线 代表实现接口  3 、 当一个类‘知道’另一类时，可以用关联（association） 箭头+实线
    4 、大雁和雁群 每一只大雁都属于一个雁群，一个雁群可以有多只大雁 ，可以用聚合（Aggergation） 聚合定义：表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象一部分 空心菱形+实线+箭头
    5 、大雁和翅膀 大雁和翅膀的关系是一种强的‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样，被称作合成（Composition 也叫做组合）   实心菱形+实线+箭头
    6 、动物需要氧气、水、和食物等  动物和这些东西之间的关系是依赖（Dependency）关系  虚线+箭头

总结： 简单工厂模式 是把选择使用哪种算法、算法的实例化抽取出来放到工厂中  避免了客户端需要进行算法的实例化

第二章： 策略模式 (CashSystem.ts)
    收银系统  因为商场活动需要对商品进行不同的收费模式， 打折、满300返100、正常收费等收费模式。运用第一章学到的简单工厂模式，写出来一个收银系统。 但是不能满足商场经常对商品进行各种促销活动的需求，每一次都需要改动工厂 代码需要重新的编译部署，很明显是不合理的。  
    面对算法需要经常的改动这种情况，简单工厂模式就不怎么合适，策略模式很明显会是一个不错的选择。
    策略模式写出来的收银系统。使得选择不同算法的判断在客户端出现，这不应该。而简单工厂能够避免这种情况。
    简单工厂模式-策略模式结合，后把判断使用不同的算法这部分移动到Context类中。

总结： 策略模式 是把算法的统一调用放到Context类中 避免了客户端需要调用算法的接口
      简单工厂模式-策略模式 是把选择使用哪种算法、算法的实例化以及算法接口的调用抽取出来  避免客户端需要进行这部分的处理

第三章： 单一职责原则
    对一个类而言，应该有且仅有一个引起它变化的原因。
    如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化，可能会削弱或者一直这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。
    软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个职责。
    